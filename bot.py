import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
import threading
from flask import Flask

# üîê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "7357522794:AAHqsKsbtForBWBF9bzve6FUx-AXggD5dDc"
print(f"TOKEN is: {TOKEN}")
bot = telebot.TeleBot(TOKEN)

# üìö –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ (–≤–∏–¥–µ–æ –∏ —Ç–∞–±—ã)
lessons = [
    {"videos": ["https://youtu.be/2j0QJC_wtn0"]},
    {"videos": ["https://youtu.be/quIvJs0LRBw"]},
    {"videos": ["https://youtu.be/5BW5AZzN_2c"]},
    {"videos": ["https://youtu.be/XIliqWpaCgQ"]},
    {"videos": ["https://youtu.be/VOe51uANd20"]},
    {"videos": ["https://youtu.be/buwcquAota4"]},
    {"videos": ["https://youtu.be/VLvKlR3sq_I"]},
    {"videos": ["https://youtu.be/21DArHOzkdw", "https://youtu.be/FgEOgw66FPk"], "tab": "—É—Ä–æ–∫08 Smoke on the water.pdf"},
    {"videos": ["https://youtu.be/UMiCbfDzNp0"], "tab": "—É—Ä–æ–∫09 –ú–∏—Å—Å–∏—è –ù–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞.pdf"},
    {"videos": ["https://youtu.be/6E_BwkAnxnA"], "tab": "—É—Ä–æ–∫10 Prayer In C.pdf"},
    {"videos": ["https://youtu.be/k8k1FWbN_po"], "tab": "—É—Ä–æ–∫11-–õ–µ—Å–Ω–∏–∫.pdf"},
    {"videos": ["https://youtu.be/2hgxVfV0Yh4"], "tab": "—É—Ä–æ–∫12-–ß–µ—Ä–Ω—ã–π –ë—É–º–µ—Ä.pdf"},
    {"videos": ["https://youtu.be/5wbZNOA7sWY"], "tab": "—É—Ä–æ–∫13-–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.pdf"},
    {"videos": ["https://youtu.be/SxDDwJtw2O8"], "tab": "—É—Ä–æ–∫14-–ö—É–∫–ª–∞ –ö–æ–ª–¥—É–Ω–∞.pdf"},
    {"videos": ["https://youtu.be/PIBGDBw_ZIQ"], "tab": "—É—Ä–æ–∫15-–ö–æ–Ω—å - –õ—é–±—ç.pdf"},
]

# üíæ –•—Ä–∞–Ω–∏–º, –∫–∞–∫–æ–π —É—Ä–æ–∫ –±—ã–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_progress = {}

app = Flask(__name__)

def run_flask():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

# üìç –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text="–£—á–∏—Ç—å—Å—è üé∏", callback_data="learn")
    keyboard.add(button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ:", reply_markup=keyboard)

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£—á–∏—Ç—å—Å—è"
@bot.callback_query_handler(func=lambda call: call.data == "learn")
def handle_learn(call):
    user_id = call.from_user.id
    index = user_progress.get(user_id, 0)

    if index >= len(lessons):
        bot.send_message(call.message.chat.id, "–¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —É—Ä–æ–∫–∏! –ú–æ–ª–æ–¥–µ—Ü! üéâ")
        return

    lesson = lessons[index]
    bot.answer_callback_query(call.id, text="–û—Ç–ø—Ä–∞–≤–ª—è—é —É—Ä–æ–∫...")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞)
    for video in lesson["videos"]:
        bot.send_message(call.message.chat.id, video)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–± ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
    if "tab" in lesson:
        tab_path = os.path.join("tabs", lesson["tab"])
        if os.path.exists(tab_path):
            with open(tab_path, 'rb') as f:
                bot.send_document(call.message.chat.id, f)
        else:
            bot.send_message(call.message.chat.id, f"–¢–∞–± {lesson['tab']} –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")

    # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress[user_id] = index + 1


def run_bot():
    bot.infinity_polling()

# ‚ñ∂ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    threading.Thread(target=run_bot).start()